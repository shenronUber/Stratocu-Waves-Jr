% create_and_test_uncertainty_model.m
%
% This program loads the results from the synthetic experiment, trains a
% machine learning model to predict measurement uncertainty, and demonstrates
% how to use the model on new, hypothetical data.

clear; clc; close all;

%% 1. Load the Training Data
% This is the .mat file generated by run_uncertainty_experiment.m
if ~exist('uncertainty_experiment_results.mat', 'file')
    error('File "uncertainty_experiment_results.mat" not found. Please run the main experiment first.');
end
load('uncertainty_experiment_results.mat'); % This loads the 'results' table

fprintf('Loaded %d results from the synthetic experiment.\n', height(results));

%% 2. Prepare the Predictors (Inputs) and Response (Output)

% --- Create the Predictor Table (X) ---
% These are the features the model will use to make predictions.
% For a real detection, these are the values your algorithm would estimate.

% A key feature is the alignment between the wave and drift.
% We use cos(angle_difference) because it treats aligned (0 deg) and
% opposed (180 deg) motion similarly (cos=1 and -1), and perpendicular
% motion (90 deg) differently (cos=0).
angle_difference_deg = results.Wave_Direction_deg - results.Drift_Angle_deg;
cos_alignment = abs(cosd(angle_difference_deg)); % Use abs() to treat aligned/opposed identically

predictors = table(...
    results.Wavelength_m / 1000, ... % Use km for better scaling
    results.Drift_Speed_ms, ...      % In a real case, this would be the *estimated* drift
    cos_alignment, ...
    'VariableNames', {'Wavelength_km', 'Estimated_Drift_Speed_ms', 'Abs_Cos_Alignment'});

disp('Preview of Predictor table (X):');
disp(head(predictors));

% --- Create the Response Vector (Y) ---
% This is what we want the model to predict: the uncertainty, which we
% model as the absolute error.
response = abs(results.Error_ms);

disp('Response variable (Y) is the Absolute Error in m/s.');
fprintf('Mean absolute error in dataset: %.2f m/s\n', mean(response, 'omitnan'));

%% 3. Train the Uncertainty Prediction Model

% We will use a Gradient Boosted Regression Trees model (fitrensemble).
% It's powerful, robust, and great for this type of problem.
% This requires the Statistics and Machine Learning Toolbox.

fprintf('\nTraining the uncertainty prediction model...\n');

% 'LSBoost' is a good general-purpose algorithm.
% 'NumLearningCycles' is the number of trees; more can be better but risks overfitting.
uncertaintyModel = fitrensemble(...
    predictors, ...
    response, ...
    'Method', 'LSBoost', ...
    'NumLearningCycles', 100, ...
    'CrossVal', 'on'); % Use cross-validation to get a robust estimate of performance

% Check the model's performance on the training data (k-fold loss)
kfold_error = kfoldLoss(uncertaintyModel);
fprintf('Model training complete.\n');
fprintf('Estimated Root Mean Squared Error from cross-validation: %.2f m/s\n', kfold_error);

% For the final model, retrain on all data without cross-validation
uncertaintyModel = fitrensemble(predictors, response, 'Method', 'LSBoost', 'NumLearningCycles', 100);

%% 4. Save the Trained Model

save('uncertainty_model.mat', 'uncertaintyModel');
fprintf('Uncertainty model saved to "uncertainty_model.mat".\n\n');

%% 5. DEMONSTRATION: How to Use the Model on a New, Real-Life Detection

fprintf('--- DEMONSTRATION ---\n');

% Imagine your algorithm just processed a real satellite image and found a wave.
% It produced the following ESTIMATES:
detected_wavelength_km      = 160;   % from the wavelet scale
estimated_advection_speed   = 8.5;   % from the advection removal step
estimated_advection_dir_deg = 200;
detected_wave_dir_deg       = 240;

fprintf('Hypothetical new detection:\n');
fprintf('  - Wavelength: %.0f km\n', detected_wavelength_km);
fprintf('  - Estimated Advection: %.1f m/s at %d deg\n', estimated_advection_speed, estimated_advection_dir_deg);
fprintf('  - Detected Wave Direction: %d deg\n', detected_wave_dir_deg);

% Step 1: Create a predictor table for the new detection with the EXACT same variable names.
new_angle_diff = detected_wave_dir_deg - estimated_advection_dir_deg;
new_cos_alignment = abs(cosd(new_angle_diff));

newDetection = table(...
    detected_wavelength_km, ...
    estimated_advection_speed, ...
    new_cos_alignment, ...
    'VariableNames', {'Wavelength_km', 'Estimated_Drift_Speed_ms', 'Abs_Cos_Alignment'});

% Step 2: Use the trained model to predict the uncertainty.
predicted_uncertainty = predict(uncertaintyModel, newDetection);

fprintf('\nPredicted Uncertainty for this detection: +/- %.2f m/s\n', predicted_uncertainty);

% Example of how you would report this result:
% detected_speed = 17.2; % The speed your algorithm measured
% fprintf('Final Reported Speed: %.1f \x00B1 %.1f m/s\n', detected_speed, predicted_uncertainty);

%% 6. VISUALIZE MODEL PERFORMANCE FOR THE PAPER

fprintf('Generating model performance figure...\n');

% To get predictions for the cross-validated model, we can loop through the folds
% or, for a simpler visualization, just get predictions from the final model.
predictions = predict(uncertaintyModel, predictors);

figure('Name', 'Uncertainty Model Performance', 'Position', [100 100 1000 450]);
t = tiledlayout(1, 2, 'Padding', 'compact', 'TileSpacing', 'compact');

% --- Panel (a): Predicted vs. True Error ---
ax1 = nexttile;
scatter(response, predictions, 20, predictors.Estimated_Drift_Speed_ms, 'filled', 'MarkerFaceAlpha', 0.6);
hold on;
lims = [0 max([response; predictions])*1.1];
plot(lims, lims, 'k--', 'LineWidth', 2);
axis equal;
grid on;
xlim(lims);
ylim(lims);
xlabel('True Absolute Error (m/s)');
ylabel('Predicted Uncertainty (m/s)');
title('(a) Model Prediction Accuracy');
cb = colorbar;
cb.Label.String = 'Drift Speed (m/s)';
legend('Model Predictions', 'Ideal (y=x)', 'Location', 'northwest');

% --- Panel (b): Predictor Importance ---
ax2 = nexttile;
imp = predictorImportance(uncertaintyModel);
bar(imp);
ax2.XTickLabel = uncertaintyModel.PredictorNames;
ax2.XTickLabelRotation = 30;
ylabel('Importance Score');
title('(b) Predictor Importance Ranking');
grid on;

% Save the figure for the paper
saveas(gcf, 'Figure_Model_Performance.png');
fprintf('Model performance figure saved as "Figure_Model_Performance.png".\n');